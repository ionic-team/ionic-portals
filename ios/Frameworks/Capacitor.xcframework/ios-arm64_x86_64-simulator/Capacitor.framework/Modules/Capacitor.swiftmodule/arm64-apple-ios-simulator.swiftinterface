// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Capacitor
@_exported import Capacitor
import Cordova
import Dispatch
import Foundation
import MobileCoreServices
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CAPWebView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var bridge: Capacitor.CAPBridgeProtocol? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) final public var isNewBinary: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func instanceDescriptor() -> Capacitor.InstanceDescriptor
  @_Concurrency.MainActor(unsafe) open func capacitorDidLoad()
  @_Concurrency.MainActor(unsafe) open func loadInitialContext(_ userContentController: WebKit.WKUserContentController) throws
  @objc deinit
}
extension Capacitor.CAPWebView {
  @_Concurrency.MainActor(unsafe) open func webViewConfiguration(for instanceConfiguration: Capacitor.InstanceConfiguration) -> WebKit.WKWebViewConfiguration
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class CAPBridgeViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var bridge: Capacitor.CAPBridgeProtocol? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var webView: WebKit.WKWebView? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isStatusBarVisible: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var statusBarStyle: UIKit.UIStatusBarStyle
  @_Concurrency.MainActor(unsafe) public var statusBarAnimation: UIKit.UIStatusBarAnimation
  @objc @_Concurrency.MainActor(unsafe) public var supportedOrientations: [Swift.Int]
  @_Concurrency.MainActor(unsafe) final public var isNewBinary: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformUnwindSegueAction(_ action: ObjectiveC.Selector, from fromViewController: UIKit.UIViewController, withSender sender: Any) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func instanceDescriptor() -> Capacitor.InstanceDescriptor
  @_Concurrency.MainActor(unsafe) open func webViewConfiguration(for instanceConfiguration: Capacitor.InstanceConfiguration) -> WebKit.WKWebViewConfiguration
  @_Concurrency.MainActor(unsafe) open func webView(with frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) open func capacitorDidLoad()
  @_Concurrency.MainActor(unsafe) final public func loadWebView()
  @_Concurrency.MainActor(unsafe) open func setStatusBarDefaults()
  @_Concurrency.MainActor(unsafe) open func setScreenOrientationDefaults()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) open func setStatusBarVisible(_ isStatusBarVisible: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setStatusBarStyle(_ statusBarStyle: UIKit.UIStatusBarStyle)
  @_Concurrency.MainActor(unsafe) open func setStatusBarAnimation(_ statusBarAnimation: UIKit.UIStatusBarAnimation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Capacitor.CAPBridgeViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getServerBasePath() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setServerBasePath(path: Swift.String)
}
@objc public protocol CAPBridgeProtocol : ObjectiveC.NSObjectProtocol {
  @objc var viewController: UIKit.UIViewController? { get }
  @objc var config: Capacitor.InstanceConfiguration { get }
  @objc var webView: WebKit.WKWebView? { get }
  @objc var notificationRouter: Capacitor.NotificationRouter { get }
  @objc var isSimEnvironment: Swift.Bool { get }
  @objc var isDevEnvironment: Swift.Bool { get }
  @objc var userInterfaceStyle: UIKit.UIUserInterfaceStyle { get }
  @objc var statusBarVisible: Swift.Bool { get set }
  @objc var statusBarStyle: UIKit.UIStatusBarStyle { get set }
  @objc var statusBarAnimation: UIKit.UIStatusBarAnimation { get set }
  @objc @available(*, deprecated, renamed: "webView")
  func getWebView() -> WebKit.WKWebView?
  @objc @available(*, deprecated, renamed: "isSimEnvironment")
  func isSimulator() -> Swift.Bool
  @objc @available(*, deprecated, renamed: "isDevEnvironment")
  func isDevMode() -> Swift.Bool
  @objc @available(*, deprecated, renamed: "statusBarVisible")
  func getStatusBarVisible() -> Swift.Bool
  @objc @available(*, deprecated, renamed: "statusBarStyle")
  func getStatusBarStyle() -> UIKit.UIStatusBarStyle
  @objc @available(*, deprecated, renamed: "userInterfaceStyle")
  func getUserInterfaceStyle() -> UIKit.UIUserInterfaceStyle
  @objc @available(*, deprecated, message: "Moved - equivalent is found on config.localURL")
  func getLocalUrl() -> Swift.String
  @objc @available(*, deprecated, renamed: "savedCall(withID:)")
  func getSavedCall(_ callbackId: Swift.String) -> Capacitor.CAPPluginCall?
  @objc @available(*, deprecated, renamed: "releaseCall(withID:)")
  func releaseCall(callbackId: Swift.String)
  @objc func plugin(withName: Swift.String) -> Capacitor.CAPPlugin?
  @objc func saveCall(_ call: Capacitor.CAPPluginCall)
  @objc func savedCall(withID: Swift.String) -> Capacitor.CAPPluginCall?
  @objc func releaseCall(_ call: Capacitor.CAPPluginCall)
  @objc func releaseCall(withID: Swift.String)
  @objc func evalWithPlugin(_ plugin: Capacitor.CAPPlugin, js: Swift.String)
  @objc func eval(js: Swift.String)
  @objc func triggerJSEvent(eventName: Swift.String, target: Swift.String)
  @objc func triggerJSEvent(eventName: Swift.String, target: Swift.String, data: Swift.String)
  @objc func triggerWindowJSEvent(eventName: Swift.String)
  @objc func triggerWindowJSEvent(eventName: Swift.String, data: Swift.String)
  @objc func triggerDocumentJSEvent(eventName: Swift.String)
  @objc func triggerDocumentJSEvent(eventName: Swift.String, data: Swift.String)
  @objc func localURL(fromWebURL webURL: Foundation.URL?) -> Foundation.URL?
  @objc func portablePath(fromLocalURL localURL: Foundation.URL?) -> Foundation.URL?
  @objc func showAlertWith(title: Swift.String, message: Swift.String, buttonTitle: Swift.String)
  @objc func presentVC(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc func dismissVC(animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension Capacitor.CAPBridgeProtocol {
  @available(*, deprecated, message: "Use CAPLog directly")
  public func modulePrint(_ plugin: Capacitor.CAPPlugin, _ items: Any...)
  public func alert(_ title: Swift.String, _ message: Swift.String, _ buttonTitle: Swift.String = "OK")
  @available(*, deprecated, renamed: "statusBarVisible")
  public func setStatusBarVisible(_ visible: Swift.Bool)
  @available(*, deprecated, renamed: "statusBarStyle")
  public func setStatusBarStyle(_ style: UIKit.UIStatusBarStyle)
  @available(*, deprecated, renamed: "statusBarAnimation")
  public func setStatusBarAnimation(_ animation: UIKit.UIStatusBarAnimation)
}
public enum CapacitorBridgeError : Swift.Error {
  case errorExportingCoreJS
  public static func == (a: Capacitor.CapacitorBridgeError, b: Capacitor.CapacitorBridgeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Capacitor.CapacitorBridgeError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension Capacitor.CapacitorBridgeError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension WebKit.WKWebView : Capacitor.CapacitorExtension {
  public typealias CapacitorType = Capacitor.CapacitorExtensionTypeWrapper<WebKit.WKWebView>
}
extension Capacitor.CapacitorExtensionTypeWrapper where T == WebKit.WKWebView {
  public var keyboardShouldRequireUserInteraction: Swift.Bool? {
    get
  }
  public func setKeyboardShouldRequireUserInteraction(_ flag: Swift.Bool? = nil)
}
extension Foundation.Data : Capacitor.CapacitorExtension {
  public typealias CapacitorType = Capacitor.CapacitorExtensionTypeWrapper<Foundation.Data>
}
extension Capacitor.CapacitorExtensionTypeWrapper where T == Foundation.Data {
  public static func data(base64EncodedOrDataUrl: Swift.String) -> Foundation.Data?
}
public protocol JSValue {
}
extension Swift.String : Capacitor.JSValue {
}
extension Swift.Bool : Capacitor.JSValue {
}
extension Swift.Int : Capacitor.JSValue {
}
extension Swift.Float : Capacitor.JSValue {
}
extension Swift.Double : Capacitor.JSValue {
}
extension Foundation.NSNumber : Capacitor.JSValue {
}
extension Foundation.NSNull : Capacitor.JSValue {
}
extension Swift.Array : Capacitor.JSValue {
}
extension Foundation.Date : Capacitor.JSValue {
}
extension Swift.Dictionary : Capacitor.JSValue where Key == Swift.String, Value == Capacitor.JSValue {
}
public typealias JSObject = [Swift.String : Capacitor.JSValue]
public typealias JSArray = [Capacitor.JSValue]
public protocol JSStringContainer {
  func getString(_ key: Swift.String, _ defaultValue: Swift.String) -> Swift.String
  func getString(_ key: Swift.String) -> Swift.String?
}
extension Capacitor.JSStringContainer {
  public func getString(_ key: Swift.String, _ defaultValue: Swift.String) -> Swift.String
}
public protocol JSBoolContainer {
  func getBool(_ key: Swift.String, _ defaultValue: Swift.Bool) -> Swift.Bool
  func getBool(_ key: Swift.String) -> Swift.Bool?
}
extension Capacitor.JSBoolContainer {
  public func getBool(_ key: Swift.String, _ defaultValue: Swift.Bool) -> Swift.Bool
}
public protocol JSIntContainer {
  func getInt(_ key: Swift.String, _ defaultValue: Swift.Int) -> Swift.Int
  func getInt(_ key: Swift.String) -> Swift.Int?
}
extension Capacitor.JSIntContainer {
  public func getInt(_ key: Swift.String, _ defaultValue: Swift.Int) -> Swift.Int
}
public protocol JSFloatContainer {
  func getFloat(_ key: Swift.String, _ defaultValue: Swift.Float) -> Swift.Float
  func getFloat(_ key: Swift.String) -> Swift.Float?
}
extension Capacitor.JSFloatContainer {
  public func getFloat(_ key: Swift.String, _ defaultValue: Swift.Float) -> Swift.Float
}
public protocol JSDoubleContainer {
  func getDouble(_ key: Swift.String, _ defaultValue: Swift.Double) -> Swift.Double
  func getDouble(_ key: Swift.String) -> Swift.Double?
}
extension Capacitor.JSDoubleContainer {
  public func getDouble(_ key: Swift.String, _ defaultValue: Swift.Double) -> Swift.Double
}
public protocol JSDateContainer {
  func getDate(_ key: Swift.String, _ defaultValue: Foundation.Date) -> Foundation.Date
  func getDate(_ key: Swift.String) -> Foundation.Date?
}
extension Capacitor.JSDateContainer {
  public func getDate(_ key: Swift.String, _ defaultValue: Foundation.Date) -> Foundation.Date
}
public protocol JSArrayContainer {
  func getArray(_ key: Swift.String, _ defaultValue: Capacitor.JSArray) -> Capacitor.JSArray
  func getArray<T>(_ key: Swift.String, _ ofType: T.Type) -> [T]?
  func getArray(_ key: Swift.String) -> Capacitor.JSArray?
}
extension Capacitor.JSArrayContainer {
  public func getArray(_ key: Swift.String, _ defaultValue: Capacitor.JSArray) -> Capacitor.JSArray
  public func getArray<T>(_ key: Swift.String, _ ofType: T.Type) -> [T]?
}
public protocol JSObjectContainer {
  func getObject(_ key: Swift.String, _ defaultValue: Capacitor.JSObject) -> Capacitor.JSObject
  func getObject(_ key: Swift.String) -> Capacitor.JSObject?
}
extension Capacitor.JSObjectContainer {
  public func getObject(_ key: Swift.String, _ defaultValue: Capacitor.JSObject) -> Capacitor.JSObject
}
public protocol JSValueContainer : Capacitor.JSArrayContainer, Capacitor.JSBoolContainer, Capacitor.JSDateContainer, Capacitor.JSDoubleContainer, Capacitor.JSFloatContainer, Capacitor.JSIntContainer, Capacitor.JSObjectContainer, Capacitor.JSStringContainer {
  static var jsDateFormatter: Foundation.ISO8601DateFormatter { get }
  var jsObjectRepresentation: Capacitor.JSObject { get }
}
extension Capacitor.JSValueContainer {
  public func getAny(_ key: Swift.String) -> Any?
  public func getString(_ key: Swift.String) -> Swift.String?
  public func getBool(_ key: Swift.String) -> Swift.Bool?
  public func getInt(_ key: Swift.String) -> Swift.Int?
  public func getFloat(_ key: Swift.String) -> Swift.Float?
  public func getDouble(_ key: Swift.String) -> Swift.Double?
  public func getDate(_ key: Swift.String) -> Foundation.Date?
  public func getArray(_ key: Swift.String) -> Capacitor.JSArray?
  public func getObject(_ key: Swift.String) -> Capacitor.JSObject?
}
public enum JSTypes {
}
extension Capacitor.JSTypes {
  public static func coerceDictionaryToJSObject(_ dictionary: Foundation.NSDictionary?, formattingDatesAsStrings: Swift.Bool = false) -> Capacitor.JSObject?
  public static func coerceDictionaryToJSObject(_ dictionary: [Swift.AnyHashable : Any]?, formattingDatesAsStrings: Swift.Bool = false) -> Capacitor.JSObject?
  public static func coerceArrayToJSArray(_ array: [Any]?, formattingDatesAsStrings: Swift.Bool = false) -> Capacitor.JSArray?
}
@_inheritsConvenienceInitializers @objc public class CAPFileManager : ObjectiveC.NSObject {
  @available(*, deprecated, message: "Use portablePath(fromLocalURL:) on the Bridge")
  public static func getPortablePath(host: Swift.String, uri: Foundation.URL?) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "'statusBarTappedNotification' has been moved to Notification.Name.capacitorStatusBarTapped. 'getLastUrl' and application delegate methods have been moved to ApplicationDelegateProxy.")
@objc public class CAPBridge : ObjectiveC.NSObject {
  @objc public static let statusBarTappedNotification: Foundation.Notification
  public static func getLastUrl() -> Foundation.URL?
  public static func handleOpenUrl(_ url: Foundation.URL, _ options: [UIKit.UIApplication.OpenURLOptionsKey : Any]) -> Swift.Bool
  public static func handleContinueActivity(_ userActivity: Foundation.NSUserActivity, _ restorationHandler: @escaping ([UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  public static func handleAppBecameActive(_ application: UIKit.UIApplication)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor : Capacitor.CapacitorExtension {
  public typealias CapacitorType = Capacitor.CapacitorExtensionTypeWrapper<UIKit.UIColor>
}
extension Capacitor.CapacitorExtensionTypeWrapper where T : UIKit.UIColor {
  public static func color(r: Swift.Int, g: Swift.Int, b: Swift.Int, a: Swift.Int = 0xFF) -> UIKit.UIColor
  public static func color(argb: Swift.UInt32) -> UIKit.UIColor
  public static func color(fromHex: Swift.String) -> UIKit.UIColor?
}
public typealias PluginCallResultData = [Swift.String : Any]
public enum PluginCallResult {
  case dictionary(Capacitor.PluginCallResultData)
}
@objc public class CAPPluginCallResult : ObjectiveC.NSObject {
  final public let resultData: Capacitor.PluginCallResult?
  @objc public var data: Capacitor.PluginCallResultData? {
    @objc get
  }
  @objc(init:) public init(_ data: Capacitor.PluginCallResultData?)
  @objc deinit
}
@objc public class CAPPluginCallError : ObjectiveC.NSObject {
  @objc final public let message: Swift.String
  @objc final public let code: Swift.String?
  @objc final public let error: Swift.Error?
  final public let resultData: Capacitor.PluginCallResult?
  @objc public var data: Capacitor.PluginCallResultData? {
    @objc get
  }
  @objc(init:code:error:data:) public init(message: Swift.String, code: Swift.String?, error: Swift.Error?, data: Capacitor.PluginCallResultData?)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let capacitorOpenURL: Foundation.Notification.Name
  public static let capacitorOpenUniversalLink: Foundation.Notification.Name
  public static let capacitorContinueActivity: Foundation.Notification.Name
  public static let capacitorDidRegisterForRemoteNotifications: Foundation.Notification.Name
  public static let capacitorDidFailToRegisterForRemoteNotifications: Foundation.Notification.Name
  public static let capacitorDecidePolicyForNavigationAction: Foundation.Notification.Name
  public static let capacitorStatusBarTapped: Foundation.Notification.Name
}
@objc extension Foundation.NSNotification {
  @objc public static let capacitorOpenURL: Foundation.Notification.Name
  @objc public static let capacitorOpenUniversalLink: Foundation.Notification.Name
  @objc public static let capacitorContinueActivity: Foundation.Notification.Name
  @objc public static let capacitorDidRegisterForRemoteNotifications: Foundation.Notification.Name
  @objc public static let capacitorDidFailToRegisterForRemoteNotifications: Foundation.Notification.Name
  @objc public static let capacitorDecidePolicyForNavigationAction: Foundation.Notification.Name
  @objc public static let capacitorStatusBarTapped: Foundation.Notification.Name
}
@objc public enum CAPNotifications : Swift.Int {
  @available(*, deprecated, message: "renamed to 'Notification.Name.capacitorOpenURL'")
  case URLOpen
  @available(*, deprecated, message: "renamed to 'Notification.Name.capacitorOpenUniversalLink'")
  case UniversalLinkOpen
  @available(*, deprecated, message: "Notification.Name.capacitorContinueActivity'")
  case ContinueActivity
  @available(*, deprecated, message: "renamed to 'Notification.Name.capacitorDidRegisterForRemoteNotifications'")
  case DidRegisterForRemoteNotificationsWithDeviceToken
  @available(*, deprecated, message: "renamed to 'Notification.Name.capacitorDidFailToRegisterForRemoteNotifications'")
  case DidFailToRegisterForRemoteNotificationsWithError
  @available(*, deprecated, message: "renamed to 'Notification.Name.capacitorDecidePolicyForNavigationAction'")
  case DecidePolicyForNavigationAction
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class JSDate {
  @objc deinit
}
@available(*, deprecated, renamed: "PluginCallResultData")
public typealias JSResultBody = [Swift.String : Any]
@_inheritsConvenienceInitializers @objc(CAPNotificationRouter) public class NotificationRouter : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  weak public var pushNotificationHandler: Capacitor.NotificationHandlerProtocol? {
    get
    set
  }
  weak public var localNotificationHandler: Capacitor.NotificationHandlerProtocol? {
    get
    set
  }
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@available(*, deprecated, renamed: "PluginCallResultData")
public typealias PluginCallErrorData = [Swift.String : Any]
@available(*, deprecated, renamed: "PluginCallResultData")
public typealias PluginResultData = [Swift.String : Any]
extension Capacitor.CAPPluginCall : Capacitor.JSValueContainer {
  public var jsObjectRepresentation: Capacitor.JSObject {
    get
  }
}
@objc extension Capacitor.CAPPluginCall {
  @objc dynamic public var dictionaryRepresentation: Foundation.NSDictionary {
    @objc get
  }
  @objc public static var jsDateFormatter: Foundation.ISO8601DateFormatter
}
@objc extension Capacitor.CAPPluginCall {
  @objc @available(*, deprecated, message: "Presence of a key should not be considered significant. Use typed accessors to check the value instead.")
  dynamic public func hasOption(_ key: Swift.String) -> Swift.Bool
  @objc @available(*, deprecated, renamed: "resolve()")
  dynamic public func success()
  @objc @available(*, deprecated, renamed: "resolve")
  dynamic public func success(_ data: Capacitor.PluginCallResultData = [:])
  @objc dynamic public func resolve()
  @objc dynamic public func resolve(_ data: Capacitor.PluginCallResultData = [:])
  @objc @available(*, deprecated, renamed: "reject")
  dynamic public func error(_ message: Swift.String, _ error: Swift.Error? = nil, _ data: Capacitor.PluginCallResultData = [:])
  @objc dynamic public func reject(_ message: Swift.String, _ code: Swift.String? = nil, _ error: Swift.Error? = nil, _ data: Capacitor.PluginCallResultData = [:])
  @objc dynamic public func unimplemented()
  @objc dynamic public func unimplemented(_ message: Swift.String)
  @objc dynamic public func unavailable()
  @objc dynamic public func unavailable(_ message: Swift.String)
}
public protocol CapacitorExtension {
  associatedtype CapacitorType
  var capacitor: Self.CapacitorType { get }
  static var capacitor: Self.CapacitorType.Type { get }
}
extension Capacitor.CapacitorExtension {
  public var capacitor: Capacitor.CapacitorExtensionTypeWrapper<Self> {
    get
  }
  public static var capacitor: Capacitor.CapacitorExtensionTypeWrapper<Self>.Type {
    get
  }
}
public struct CapacitorExtensionTypeWrapper<T> {
}
extension Swift.Array : Capacitor.CapacitorExtension {
  public typealias CapacitorType = Capacitor.CapacitorExtensionTypeWrapper<Swift.Array<Element>>
}
extension Capacitor.CapacitorExtensionTypeWrapper where T == [Capacitor.JSValue] {
  public func replacingNullValues() -> [Capacitor.JSValue?]
  public func replacingOptionalValues() -> [Capacitor.JSValue]
}
extension Capacitor.CapacitorExtensionTypeWrapper where T == [Capacitor.JSValue?] {
  public func replacingNullValues() -> [Capacitor.JSValue?]
  public func replacingOptionalValues() -> [Capacitor.JSValue]
}
@objc(CAPNotificationHandlerProtocol) public protocol NotificationHandlerProtocol {
  @objc func willPresent(notification: UserNotifications.UNNotification) -> UserNotifications.UNNotificationPresentationOptions
  @objc func didReceive(response: UserNotifications.UNNotificationResponse)
}
public struct KeyPath {
}
extension Capacitor.KeyPath : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension Swift.Dictionary where Key == Swift.String, Value == Capacitor.JSValue {
  public subscript(keyPath keyPath: Capacitor.KeyPath) -> Capacitor.JSValue? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CAPConsolePlugin) public class CAPConsolePlugin : Capacitor.CAPPlugin {
  @objc public func log(_ call: Capacitor.CAPPluginCall)
  @objc override dynamic public init(bridge: Capacitor.CAPBridgeProtocol, pluginId: Swift.String, pluginName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CAPLog {
  public static var enableLogging: Swift.Bool
  public static func print(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n")
  @objc deinit
}
extension Capacitor.InstanceConfiguration {
  @objc dynamic public func getPluginConfigValue(_ pluginId: Swift.String, _ configKey: Swift.String) -> Any?
  @objc dynamic public func shouldAllowNavigation(to host: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use direct property accessors")
  @objc dynamic public func getValue(_ key: Swift.String) -> Any?
  @available(*, deprecated, message: "Use direct property accessors")
  @objc dynamic public func getString(_ key: Swift.String) -> Swift.String?
}
public enum InstanceDescriptorDefaults {
}
extension Capacitor.InstanceDescriptor {
  @objc dynamic public var cordovaDeployDisabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public func normalize()
}
@_inheritsConvenienceInitializers @objc(CAPApplicationDelegateProxy) @_Concurrency.MainActor(unsafe) public class ApplicationDelegateProxy : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public static let shared: Capacitor.ApplicationDelegateProxy
  @_Concurrency.MainActor(unsafe) public var lastURL: Foundation.URL? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CAPWebViewPlugin) public class CAPWebViewPlugin : Capacitor.CAPPlugin {
  @objc override dynamic public init(bridge: Capacitor.CAPBridgeProtocol, pluginId: Swift.String, pluginName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Capacitor.CapacitorBridgeError : Swift.Equatable {}
extension Capacitor.CapacitorBridgeError : Swift.Hashable {}
extension Capacitor.CAPNotifications : Swift.Equatable {}
extension Capacitor.CAPNotifications : Swift.Hashable {}
extension Capacitor.CAPNotifications : Swift.RawRepresentable {}
